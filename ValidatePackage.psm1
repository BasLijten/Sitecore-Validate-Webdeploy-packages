#
# Module manifest for module 'myManifest'
#
# Generated by: User01
#
# Generated on: 1/24/2012
#

@{

# Script module or binary module file associated with this manifest
# RootModule = ''

# Version number of this module.
ModuleVersion = '1.0'

# ID used to uniquely identify this module
GUID = 'd0a9150d-b6a4-4b17-a325-e3a24fed0aa9'

# Author of this module
Author = 'Bas Lijten'

# Company or vendor of this module
#CompanyName = 'Achmea'

# Copyright statement for this module
#Copyright = '(c) 2012 User01. All rights reserved.'

# Description of the functionality provided by this module
# Description = ''

# Minimum version of the Windows PowerShell engine required by this module
# PowerShellVersion = ''

# Name of the Windows PowerShell host required by this module
# PowerShellHostName = ''

# Minimum version of the Windows PowerShell host required by this module
# PowerShellHostVersion = ''

# Minimum version of the .NET Framework required by this module
# DotNetFrameworkVersion = ''

# Minimum version of the common language runtime (CLR) required by this module
# CLRVersion = ''

# Processor architecture (None, X86, Amd64) required by this module
# ProcessorArchitecture = ''

# Modules that must be imported into the global environment prior to importing this module
# RequiredModules = @()

# Assemblies that must be loaded prior to importing this module
# RequiredAssemblies = @()

# Script files (.ps1) that are run in the caller's environment prior to importing this module
# ScriptsToProcess = @()

# Type files (.ps1xml) to be loaded when importing this module
# TypesToProcess = @()

# Format files (.ps1xml) to be loaded when importing this module
# FormatsToProcess = @()

# Modules to import as nested modules of the module specified in RootModule/ModuleToProcess
# NestedModules = @()

# Functions to export from this module
FunctionsToExport = 'Validate-WebDeployPackage'

# Cmdlets to export from this module
CmdletsToExport = 'Validate-WebDeployPackage'

# Variables to export from this module
#VariablesToExport = '*'

# Aliases to export from this module
#AliasesToExport = '*'

# List of all modules packaged with this module
# ModuleList = @()

# List of all files packaged with this module
# FileList = @()

# Private data to pass to the module specified in RootModule/ModuleToProcess
# PrivateData = ''

# HelpInfo URI of this module
# HelpInfoURI = ''

# Default prefix for commands exported from this module. Override the default prefix using Import-Module -Prefix.
# DefaultCommandPrefix = ''

}


function Validate-WebDeployPackageAgainstWebsiteRoot {
<#
        .SYNOPSIS
        .DESCRIPTION
        .EXAMPLE
        Give an example of how to use it
        .EXAMPLE
        Give another example of how to use it
        .PARAMETER BaselineSitecoreModuleLocation
        baseline directory
        .PARAMETER WebdeployPackageLocation
        webdeploy package
    #>
    [CmdletBinding()]
    param(
        [Parameter(Mandatory=$True,
        ValueFromPipeline=$True,
        ValueFromPipelineByPropertyName=$True)]
        [string]$BaselineSitecoreWebsiteRootZip,

        [Parameter(Mandatory=$True,
        ValueFromPipeline=$True,
        ValueFromPipelineByPropertyName=$True)]
        [string]$WebdeployPackageLocation,

        [Parameter(Mandatory=$False,
        ValueFromPipeline=$True,
        ValueFromPipelineByPropertyName=$True)]
        [string]$baselineSitecoreWebsiteDirectory = "Website"

    )
    begin {
		#$baseLinefileEntries = [io.compression.zipfile]::OpenRead($BaselineSitecoreWebsiteRootZip).Entries        
        #$webdeployPackagefileEntries = [io.compression.zipfile]::OpenRead($webdeployPackageLocation).Entries        
             
        
    }
    process {        
        $webDeployPackagefiles = Get-WebdeployPackageFiles -WebdeployPackageLocation $WebdeployPackageLocation                               
        
        $zipPackageFiles = Get-ZipPackageFiles -ZipLocation $BaselineSitecoreWebsiteRootZip -baseLineWebsiteDir $baselineSitecoreWebsiteDirectory                 

        $duplicates = Get-DuplicateFiles -BaselineZip $BaselineSitecoreWebsiteRootZip -WebdeployZip $WebdeployPackageLocation -InstalledFiles $zipPackageFiles -ToBeDeployedFiles $webDeployPackagefiles       

        return $duplicates
    }
}

function Get-ZipPackageFiles() {
<#
        .SYNOPSIS
        .DESCRIPTION
        .EXAMPLE
        Give an example of how to use it
        .EXAMPLE
        Give another example of how to use it
        .PARAMETER BaselineSitecoreModuleLocation
        baseline directory
        .PARAMETER WebdeployPackageLocation
        webdeploy package
    #>
    [CmdletBinding()]
    param(
    [Parameter(Mandatory=$True,
        ValueFromPipeline=$True,
        ValueFromPipelineByPropertyName=$True)]
        [string]$ZipLocation,        
        [Parameter(Mandatory=$False,
        ValueFromPipeline=$True,
        ValueFromPipelineByPropertyName=$True)]
        [string]$baseLineWebsiteDir = "Website"
    )
    begin {
        $baseLinefileEntries = [io.compression.zipfile]::OpenRead($ZipLocation).Entries
        $baselineFileLocations = @()
        
    }

    process {
       foreach($baselineFileEntry in $baseLinefileEntries)
        {
            $baselineFileLocation = $baselineFileEntry.FullName.Replace($baseLineWebsiteDir, "")

            $Object = New-Object PSObject -Property @{     
                fileLocation = $baselineFileLocation
                orignalFileLocation = $baselineFileEntry.FullName
            }

            #$baselineFileLocations += $baselineFileLocation
            $baselineFileLocations += $Object
        }

        return $baselineFileLocations
     }
}

function Get-WebdeployPackageFiles() {
<#
        .SYNOPSIS
        .DESCRIPTION
        .EXAMPLE
        Give an example of how to use it
        .EXAMPLE
        Give another example of how to use it
        .PARAMETER BaselineSitecoreModuleLocation
        baseline directory
        .PARAMETER WebdeployPackageLocation
        webdeploy package
    #>
    [CmdletBinding()]
    param(        
        [Parameter(Mandatory=$True,
        ValueFromPipeline=$True,
        ValueFromPipelineByPropertyName=$True)]
        [string]$WebdeployPackageLocation
    )

    begin {    
        $webdeployPackagefileEntries = [io.compression.zipfile]::OpenRead($webdeployPackageLocation).Entries
        $webdeployPackageArchiveFilename = "archive.xml"        
        $contentPath = "Content/"

        $webdeloyFileLocations = @()        
    }

    process {
        foreach($zippedFile in $webdeployPackagefileEntries)
        {
            if($zippedFile.Name -eq $webdeployPackageArchiveFilename)
            {
                #If (Test-Path $destination){
	            #    Remove-Item $destination
                #}
                #$fileStream =  New-Object IO.FileStream ($destination) ,'Append','Write','Read'
                #$file = $zippedFile.Open()
                #$file.CopyTo($fileStream);
                #$fileStream.Close();
                #[xml]$archiveFile = $file

                $EntryReader = New-Object System.IO.StreamReader($zippedFile.Open())
                [xml]$archiveFile = $EntryReader.ReadToEnd()
                
        
                $contentPath = $contentPath + $archiveFile.sitemanifest.iisApp.contentPath.path
                $contentPathRoot = [System.IO.Path]::GetPathRoot($archiveFile.sitemanifest.iisApp.contentPath.path).split(':\','')[0]
                $contentPath = $contentPath.Replace(($contentPathRoot+ ':'),($contentPathRoot+'_C'))
                $contentPath = $contentPath.Replace('\','/')        
            }
        }

        #Iterate through the web deploy package to normalize all file locations (remove the contentpath and store all files in an Array)
        foreach($webdeployPackageFileEntry in $webdeployPackagefileEntries)
        {
            $webdeployPackageFileLocation = $webdeployPackageFileEntry.FullName.Replace($contentPath, "")

            $Object = New-Object PSObject -Property @{     
                fileLocation = $webdeployPackageFileLocation
                orignalFileLocation = $webdeployPackageFileEntry.FullName
            }            

            $webdeloyFileLocations += $Object 
        }

        return $webdeloyFileLocations

    }
}

function Get-DuplicateFiles() {
<#
        .SYNOPSIS
        .DESCRIPTION
        .EXAMPLE
        Give an example of how to use it
        .EXAMPLE
        Give another example of how to use it
        .PARAMETER BaselineSitecoreModuleLocation
        baseline directory
        .PARAMETER WebdeployPackageLocation
        webdeploy package
    #>
    [CmdletBinding()]
    param(
        [Parameter(Mandatory=$True,
        ValueFromPipeline=$True,
        ValueFromPipelineByPropertyName=$True)]
        [string]$BaselineZip,

        [Parameter(Mandatory=$True,
        ValueFromPipeline=$True,
        ValueFromPipelineByPropertyName=$True)]
        [string]$WebdeployZip,

        [Parameter(Mandatory=$True,
        ValueFromPipeline=$True,
        ValueFromPipelineByPropertyName=$True)]
        $InstalledFiles,

        [Parameter(Mandatory=$True,
        ValueFromPipeline=$True,
        ValueFromPipelineByPropertyName=$True)]
        $ToBeDeployedFiles
    )
    begin {
        $baseLinefileEntries = [io.compression.zipfile]::OpenRead($BaselineZip).Entries
        #TODO: remove the parameterized config        

        $webdeployPackagefileEntries = [io.compression.zipfile]::OpenRead($WebdeployZip).Entries        
        $sourceFiles = @()   
        $webdeployfiles = "archive.xml", "parameters.xml", "systemInfo.xml"
    }

    process {
        $fileCount = $InstalledFiles.Count
        Write-Verbose "Validating $BaselineZip - $fileCount files"

        #Find all equal objects, remove differents
        $equalObjects = Compare-Object -ExcludeDifferent -IncludeEqual $InstalledFiles $ToBeDeployedFiles -property fileLocation        
        
        #For all equal objects: compare the file version to report
        #In any case this is NOT allowed.
        foreach($equalObject in  $equalObjects | ?{($_.fileLocation -notlike "*/") -and ($webdeployfiles -notcontains $_.fileLocation)})
        {    

            $version1 = "0"
            $version2 = "0"
            
            #lookup original file in source
            $sourceFile = $InstalledFiles | Where {$_.fileLocation -eq $equalObject.fileLocation}                
            $sourceLocation = $sourceFile.orignalFileLocation

            $webdeploy = $ToBeDeployedFiles | Where {$_.fileLocation -eq $equalObject.fileLocation}
            $webdeploypackageLocation = $webdeploy.orignalFileLocation

            #Extract and load version in case of a dll.
            if($equalObject.fileLocation -like "*.dll")
            {
                
                $version1 = Get-FileVersion -zipFile $baseLinefileEntries -filename $sourceLocation
                $version2 = Get-FileVersion -zipFile $webdeployPackagefileEntries -filename $webdeploypackageLocation
            }                        
            $sourceObject = New-Object PSObject -Property @{     
                fileLocation = $equalObject.fileLocation
                orignalFileLocation = $webdeploypackageLocation
                BaseLineVersion = $version1
                WebdeployVersion = $version2
                Source = $sourceLocation
                Location = $BaselineZip
            }
            
            $sourceFiles += $sourceObject                         
        }
                
        return $sourceFiles
    }

}

function Validate-WebDeployPackageAgainstSitecoreModule {
    <#
        .SYNOPSIS
        .DESCRIPTION
        .EXAMPLE
        Give an example of how to use it
        .EXAMPLE
        Give another example of how to use it
        .PARAMETER BaselineSitecoreModuleLocation
        baseline directory
        .PARAMETER WebdeployPackageLocation
        webdeploy package
    #>
    [CmdletBinding()]
    param(
        [Parameter(Mandatory=$True,
        ValueFromPipeline=$True,
        ValueFromPipelineByPropertyName=$True)]
        [string]$BaselineSitecoreModuleLocation,

        [Parameter(Mandatory=$True,
        ValueFromPipeline=$True,
        ValueFromPipelineByPropertyName=$True)]
        [string]$WebdeployPackageLocation
    )
    begin {
    }
    process {
    }
}

function Validate-WebDeployPackageAgainstDeployedWebDeployPackage {
    <#
        .SYNOPSIS
        .DESCRIPTION
        .EXAMPLE
        Give an example of how to use it
        .EXAMPLE
        Give another example of how to use it
        .PARAMETER BaselineInstalledWebDeployPackage
        baseline directory
        .PARAMETER WebdeployPackageToValidateLocation
        webdeploy package
    #>
    [CmdletBinding()]
    param(
        [Parameter(Mandatory=$True,
        ValueFromPipeline=$True,
        ValueFromPipelineByPropertyName=$True)]
        [string]$BaselineInstalledWebDeployPackage,

        [Parameter(Mandatory=$True,
        ValueFromPipeline=$True,
        ValueFromPipelineByPropertyName=$True)]
        [string]$WebdeployPackageToValidateLocation
    )
    begin {        
    }
    process {
        $baselinezipPackageFiles = Get-WebdeployPackageFiles -WebdeployPackageLocation $BaselineInstalledWebDeployPackage        
        $zipPackageFiles = Get-WebdeployPackageFiles -WebdeployPackageLocation $WebdeployPackageToValidateLocation

        $duplicates = Get-DuplicateFiles -BaselineZip $BaselineInstalledWebDeployPackage -WebdeployZip $WebdeployPackageToValidateLocation -InstalledFiles $baselinezipPackageFiles -ToBeDeployedFiles $zipPackageFiles 

        return $duplicates
    }
}

function Get-FileVersion {
    <#
        .SYNOPSIS
        .DESCRIPTION
        .EXAMPLE
        Give an example of how to use it
        .EXAMPLE
        Give another example of how to use it
        .PARAMETER BaselineSitecoreModuleLocation
        baseline directory
        .PARAMETER WebdeployPackageLocation
        webdeploy package
    #>
    [CmdletBinding()]
    param(
        [Parameter(Mandatory=$True,
        ValueFromPipeline=$True,
        ValueFromPipelineByPropertyName=$True)]
        $zipFile,

        [Parameter(Mandatory=$True,
        ValueFromPipeline=$True,
        ValueFromPipelineByPropertyName=$True)]
        [string]$filename
    )    
    process {
        $guid = [System.Guid]::NewGuid()
            
        $zippedFile = $zipFile | Where {$_.FullName -eq $filename}
        $fileStream =  New-Object IO.FileStream ($env:temp + $guid) ,'Append','Write','Read'
        $file = $zippedFile.Open()
        $file.CopyTo($fileStream);
        $fileStream.Close();
        $webdeployVersion = [System.Diagnostics.FileVersionInfo]::GetVersionInfo($fileStream.Name).FileVersion
        Remove-Item ($env:temp + $guid)

        return $webdeployVersion
    }
}

function Validate-WebDeployPackage {
    <#
        .SYNOPSIS
        .DESCRIPTION
        .EXAMPLE
        Give an example of how to use it
        .EXAMPLE
        Give another example of how to use it
        .PARAMETER baseline directory
        baseline directory
        .PARAMETER webdeploypackage
        webdeploy package
    #>
    [CmdletBinding()]
    param(
        [Parameter(Mandatory=$True,
        ValueFromPipeline=$True,
        ValueFromPipelineByPropertyName=$True)]
        [string]$BaselineDirectory,        

        [Parameter(Mandatory=$True,
        ValueFromPipeline=$True,
        ValueFromPipelineByPropertyName=$True)]
        [string]$InstanceSpecificWebDeployPackagesDirectory,

        [Parameter(Mandatory=$True,
        ValueFromPipeline=$True,
        ValueFromPipelineByPropertyName=$True)]
        [string]$WebdeployPackageToValidate,

        [Parameter(Mandatory=$True,
        ValueFromPipeline=$True,
        ValueFromPipelineByPropertyName=$True)]
        [string]$Environment
    )
    begin {
    Add-Type -assembly "system.io.compression.filesystem"
    $duplicates = @()
    }
    process {        
        $BaseLineInstallationDirectory = $BaselineDirectory + "Installation"
        $BaseLineWDPDirectory = $BaselineDirectory + "webdeploy"
        $BaseLineModulesDirectory = $BaselineDirectory + "Modules"

        $wdp = Get-ChildItem $WebdeployPackageToValidate        
        $files = (Get-ChildItem $BaseLineInstallationDirectory | ?({$_.FullName -like "*.zip"}))

        Write-Verbose "Validating sitecore baseline Installation"

        Write-Progress -Activity "Validating sitecore baseline Installation" -Status "Initializing" -PercentComplete 0
        $counter = 0
        #test baseline installations
        foreach($file in $files)
        {
            $counter++
            Write-Progress -Activity "Validating sitecore baseline Installation" -Status $file.Name -PercentComplete ($counter/$files.Count * 100)
            $baselineDuplicates = Validate-WebDeployPackageAgainstWebsiteRoot -BaselineSitecoreWebsiteRootZip $file.FullName -WebdeployPackageLocation $WebdeployPackageToValidate
            $duplicates += $baselineDuplicates
        }        

        Write-Verbose "Validated sitecore baseline Installation"

        Write-Verbose "Validating sitecore baseline web deploy packages"
        Write-Progress -Activity "Validating sitecore baseline web deploy packages" -Status "Initializing" -PercentComplete 0
        $files = (Get-ChildItem $BaseLineWDPDirectory  | ?({$_.FullName -like "*.zip"}))
        $counter = 0
        # Test baseline packages
        foreach($file in $files)
        {
            $counter++
            Write-Progress -Activity "Validating sitecore baseline web deploy" -Status $file.Name -PercentComplete ($counter/$files.Count * 100)
            if($file.Name -eq $wdp.Name) {continue;}
            $wdpDuplicates = Validate-WebDeployPackageAgainstDeployedWebDeployPackage -BaselineInstalledWebDeployPackage $file.FullName -WebdeployPackageToValidateLocation $WebdeployPackageToValidate
            $duplicates += $wdpDuplicates
        }

        Write-Verbose "Validated sitecore baseline web deploy packages"

        # Test instance specific packages
        $envdir = $InstanceSpecificWebDeployPackagesDirectory + $Environment 
        $files = (Get-ChildItem  $envdir| ?({$_.FullName -like "*.zip"}))

        Write-Verbose "Validating sitecore instance specific web deploy packages"
        Write-Progress -Activity "Validating sitecore instance specific web deploy packages" -Status "Initializing" -PercentComplete 0
        $counter = 0

        foreach($file in $files)
        {
            $counter++
            Write-Progress -Activity "Validating sitecore instance specific web deploy packages" -Status $file.Name -PercentComplete ($counter/$files.Count * 100) 

            if($file.Name -eq $wdp.Name) {continue;}
            $instanceDuplicates = Validate-WebDeployPackageAgainstDeployedWebDeployPackage -BaselineInstalledWebDeployPackage $file.FullName -WebdeployPackageToValidateLocation $WebdeployPackageToValidate
            $duplicates += $instanceDuplicates
        }
        
        Write-Verbose "Validated sitecore instance specific web deploy packages"

        $outputfile = $wdp.Name + ".output.csv"

        if(Test-Path $outputfile)
        {
            Remove-Item $outputfile
        }

        if($duplicates.Count -eq 0) {
            "OK"| Export-CSV $outputfile -NoClobber
             Write-Output "OK"
        }

        else {            
            $duplicates | Export-CSV $outputfile -NoClobber
            Write-Output ($duplicates | Format-Table)
        }                        
    }
}

